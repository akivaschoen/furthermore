;; Analyzed by ClojureScript 0.0-3119
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{reduce take map into partition merge partition-by}, :name cljs.core.async, :imports nil, :requires {cljs.core.async.impl.channels cljs.core.async.impl.channels, cljs.core.async.impl.dispatch cljs.core.async.impl.dispatch, helpers cljs.core.async.impl.ioc-helpers, impl cljs.core.async.impl.protocols, channels cljs.core.async.impl.channels, cljs.core.async.impl.buffers cljs.core.async.impl.buffers, cljs.core.async.impl.protocols cljs.core.async.impl.protocols, timers cljs.core.async.impl.timers, dispatch cljs.core.async.impl.dispatch, cljs.core.async.impl.ioc-helpers cljs.core.async.impl.ioc-helpers, buffers cljs.core.async.impl.buffers, cljs.core.async.impl.timers cljs.core.async.impl.timers}, :uses nil, :defs {->t26033 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([ch f map< meta26034])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t26033, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :method-params ([ch f map< meta26034]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async/t26033, :variadic false, :max-fixed-arity 4}), :line 205, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ch f map< meta26034])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, Pub {:meta {:protocol-info {:methods {sub* [[p v ch close?]], unsub* [[p v ch]], unsub-all* [[p] [p v]]}}, :protocol-symbol true, :doc nil, :end-column 17, :end-line 592, :column 14, :line 592, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :protocol-symbol true, :name cljs.core.async/Pub, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 17, :column 1, :line 592, :protocol-info {:methods {sub* [[p v ch close?]], unsub* [[p v ch]], unsub-all* [[p] [p v]]}}, :info nil, :end-line 592, :impls #{cljs.core.async/t27579 cljs.core.async/t27701}, :doc nil, :test true}, reduce {:protocol-inline nil, :meta {:arglists (quote ([f init ch])), :doc "f should be a function of 2 arguments. Returns a channel containing\n  the single result of applying f to init and the first item from the\n  channel, then applying f to that result and the 2nd item, etc. If\n  the channel closes without yielding items, returns init and f is not\n  called. ch must close before reduce produces a result.", :end-column 13, :end-line 375, :column 7, :line 375, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/reduce, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 13, :method-params ([f init ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 375, :end-line 375, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f init ch])), :doc "f should be a function of 2 arguments. Returns a channel containing\n  the single result of applying f to init and the first item from the\n  channel, then applying f to that result and the 2nd item, etc. If\n  the channel closes without yielding items, returns init and f is not\n  called. ch must close before reduce produces a result.", :test true}, remove> {:protocol-inline nil, :meta {:arglists (quote ([p ch])), :doc "Takes a predicate and a target channel, and returns a channel which\n  supplies only the values for which the predicate returns false to the\n  target channel.", :end-column 14, :end-line 264, :column 7, :line 264, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/remove>, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 14, :method-params ([p ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async/t26054, :variadic false, :max-fixed-arity 2}), :line 264, :end-line 264, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p ch])), :doc "Takes a predicate and a target channel, and returns a channel which\n  supplies only the values for which the predicate returns false to the\n  target channel.", :test true}, timeout {:protocol-inline nil, :meta {:arglists (quote ([msecs])), :doc "Returns a channel that will close after msecs", :end-column 14, :end-line 53, :column 7, :line 53, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/timeout, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 14, :method-params ([msecs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{cljs.core.async.impl.channels/ManyToManyChannel any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msecs])), :doc "Returns a channel that will close after msecs", :test true}, unsub* {:protocol-inline nil, :meta {:arglists (quote ([p v ch])), :doc nil, :protocol cljs.core.async/Pub, :end-column 10, :end-line 594, :column 4, :line 594, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Pub, :name cljs.core.async/unsub*, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 10, :method-params ([p v ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 592, :end-line 594, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p v ch])), :doc nil, :test true}, admix* {:protocol-inline nil, :meta {:arglists (quote ([m ch])), :doc nil, :protocol cljs.core.async/Mix, :end-column 10, :end-line 483, :column 4, :line 483, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Mix, :name cljs.core.async/admix*, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 10, :method-params ([m ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 482, :end-line 483, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ch])), :doc nil, :test true}, unmix* {:protocol-inline nil, :meta {:arglists (quote ([m ch])), :doc nil, :protocol cljs.core.async/Mix, :end-column 10, :end-line 484, :column 4, :line 484, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Mix, :name cljs.core.async/unmix*, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 10, :method-params ([m ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 482, :end-line 484, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ch])), :doc nil, :test true}, t27424 {:num-fields 11, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t27424, :file "resources/public/js/out/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 534, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t27424 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta27425])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t27424, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :method-params ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta27425]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 11, :factory :positional, :methods ({:tag cljs.core.async/t27424, :variadic false, :max-fixed-arity 11}), :line 534, :max-fixed-arity 11, :fn-var true, :arglists (quote ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta27425])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, t25999 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t25999, :file "resources/public/js/out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 12, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, mapcat* {:protocol-inline nil, :meta {:arglists (quote ([f in out])), :private true, :end-column 15, :end-line 298, :column 8, :line 298, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :private true, :name cljs.core.async/mapcat*, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 15, :method-params ([f in out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 298, :end-line 298, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f in out])), :test true}, mix {:protocol-inline nil, :meta {:arglists (quote ([out])), :doc "Creates and returns a mix of one or more input channels which will\n  be put on the supplied out channel. Input sources can be added to\n  the mix with 'admix', and removed with 'unmix'. A mix supports\n  soloing, muting and pausing multiple inputs atomically using\n  'toggle', and can solo using either muting or pausing as determined\n  by 'solo-mode'.\n\n  Each channel can have zero or more boolean modes set via 'toggle':\n\n  :solo - when true, only this (ond other soloed) channel(s) will appear\n          in the mix output channel. :mute and :pause states of soloed\n          channels are ignored. If solo-mode is :mute, non-soloed\n          channels are muted, if :pause, non-soloed channels are\n          paused.\n\n  :mute - muted channels will have their contents consumed but not included in the mix\n  :pause - paused channels will not have their contents consumed (and thus also not included in the mix)\n", :end-column 10, :end-line 489, :column 7, :line 489, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/mix, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 10, :method-params ([out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async/t27424, :variadic false, :max-fixed-arity 1}), :line 489, :end-line 489, :max-fixed-arity 1, :fn-var true, :arglists (quote ([out])), :doc "Creates and returns a mix of one or more input channels which will\n  be put on the supplied out channel. Input sources can be added to\n  the mix with 'admix', and removed with 'unmix'. A mix supports\n  soloing, muting and pausing multiple inputs atomically using\n  'toggle', and can solo using either muting or pausing as determined\n  by 'solo-mode'.\n\n  Each channel can have zero or more boolean modes set via 'toggle':\n\n  :solo - when true, only this (ond other soloed) channel(s) will appear\n          in the mix output channel. :mute and :pause states of soloed\n          channels are ignored. If solo-mode is :mute, non-soloed\n          channels are muted, if :pause, non-soloed channels are\n          paused.\n\n  :mute - muted channels will have their contents consumed but not included in the mix\n  :pause - paused channels will not have their contents consumed (and thus also not included in the mix)\n", :test true}, pub {:protocol-inline nil, :meta {:arglists (quote ([ch topic-fn] [ch topic-fn buf-fn])), :doc "Creates and returns a pub(lication) of the supplied channel,\n  partitioned into topics by the topic-fn. topic-fn will be applied to\n  each value on the channel and the result will determine the 'topic'\n  on which that value will be put. Channels can be subscribed to\n  receive copies of topics using 'sub', and unsubscribed using\n  'unsub'. Each topic will be handled by an internal mult on a\n  dedicated channel. By default these internal channels are\n  unbuffered, but a buf-fn can be supplied which, given a topic,\n  creates a buffer with desired properties.\n\n  Each item is distributed to all subs in parallel and synchronously,\n  i.e. each sub must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow subs from holding up the pub.\n\n  Items received when there are no matching subs get dropped.\n\n  Note that if buf-fns are used then each topic is handled\n  asynchronously, i.e. if a channel is subscribed to more than one\n  topic it should not expect them to be interleaved identically with\n  the source.", :end-column 10, :end-line 597, :column 7, :line 597, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/pub, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 10, :method-params ([ch topic-fn] [ch topic-fn buf-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async/t27579, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async/t27701, :variadic false, :max-fixed-arity 3}), :line 597, :end-line 597, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ch topic-fn] [ch topic-fn buf-fn])), :doc "Creates and returns a pub(lication) of the supplied channel,\n  partitioned into topics by the topic-fn. topic-fn will be applied to\n  each value on the channel and the result will determine the 'topic'\n  on which that value will be put. Channels can be subscribed to\n  receive copies of topics using 'sub', and unsubscribed using\n  'unsub'. Each topic will be handled by an internal mult on a\n  dedicated channel. By default these internal channels are\n  unbuffered, but a buf-fn can be supplied which, given a topic,\n  creates a buffer with desired properties.\n\n  Each item is distributed to all subs in parallel and synchronously,\n  i.e. each sub must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow subs from holding up the pub.\n\n  Items received when there are no matching subs get dropped.\n\n  Note that if buf-fns are used then each topic is handled\n  asynchronously, i.e. if a channel is subscribed to more than one\n  topic it should not expect them to be interleaved identically with\n  the source.", :test true}, take {:protocol-inline nil, :meta {:arglists (quote ([n ch] [n ch buf-or-n])), :doc "Returns a channel that will return, at most, n items from ch. After n items\n   have been returned, or ch has been closed, the return chanel will close.\n\n  The output channel is unbuffered by default, unless buf-or-n is given.", :end-column 11, :end-line 735, :column 7, :line 735, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/take, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 11, :method-params ([n ch] [n ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 735, :end-line 735, :max-fixed-arity 3, :fn-var true, :arglists (quote ([n ch] [n ch buf-or-n])), :doc "Returns a channel that will return, at most, n items from ch. After n items\n   have been returned, or ch has been closed, the return chanel will close.\n\n  The output channel is unbuffered by default, unless buf-or-n is given.", :test true}, unsub-all* {:protocol-inline nil, :meta {:arglists (quote ([p] [p v])), :doc nil, :protocol cljs.core.async/Pub, :end-column 14, :end-line 595, :column 4, :line 595, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Pub, :name cljs.core.async/unsub-all*, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 14, :method-params ([p] [p v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag any, :variadic false, :max-fixed-arity 2}), :line 592, :end-line 595, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p] [p v])), :doc nil, :test true}, <! {:protocol-inline nil, :meta {:arglists (quote ([port])), :doc "takes a val from port. Must be called inside a (go ...) block. Will\n  return nil if closed. Will park if nothing is available.\n  Returns true unless port is already closed", :end-column 9, :end-line 58, :column 7, :line 58, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/<!, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 9, :method-params ([port]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 1}), :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([port])), :doc "takes a val from port. Must be called inside a (go ...) block. Will\n  return nil if closed. Will park if nothing is available.\n  Returns true unless port is already closed", :test true}, ->t26054 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([ch p filter> meta26055])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t26054, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :method-params ([ch p filter> meta26055]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async/t26054, :variadic false, :max-fixed-arity 4}), :line 250, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ch p filter> meta26055])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, t26036 {:num-fields 7, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t26036, :file "resources/public/js/out/cljs/core/async.cljs", :type true, :anonymous true, :column 10, :line 214, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t26051 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([ch p filter> meta26052])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t26051, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :method-params ([ch p filter> meta26052]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async/t26051, :variadic false, :max-fixed-arity 4}), :line 250, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ch p filter> meta26052])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, map {:protocol-inline nil, :meta {:arglists (quote ([f chs] [f chs buf-or-n])), :doc "Takes a function and a collection of source channels, and returns a\n  channel which contains the values produced by applying f to the set\n  of first items taken from each source channel, followed by applying\n  f to the set of second items from each channel, until any one of the\n  channels is closed, at which point the output channel will be\n  closed. The returned channel will be unbuffered by default, or a\n  buf-or-n can be supplied", :end-column 10, :end-line 673, :column 7, :line 673, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/map, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 10, :method-params ([f chs] [f chs buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 673, :end-line 673, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f chs] [f chs buf-or-n])), :doc "Takes a function and a collection of source channels, and returns a\n  channel which contains the values produced by applying f to the set\n  of first items taken from each source channel, followed by applying\n  f to the set of second items from each channel, until any one of the\n  channels is closed, at which point the output channel will be\n  closed. The returned channel will be unbuffered by default, or a\n  buf-or-n can be supplied", :test true}, Mux {:meta {:protocol-info {:methods {muxch* [[_]]}}, :protocol-symbol true, :doc nil, :end-column 17, :end-line 414, :column 14, :line 414, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :protocol-symbol true, :name cljs.core.async/Mux, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 17, :column 1, :line 414, :protocol-info {:methods {muxch* [[_]]}}, :info nil, :end-line 414, :impls #{cljs.core.async/t26804 cljs.core.async/t27424 cljs.core.async/t27305 cljs.core.async/t27579 cljs.core.async/t27025 cljs.core.async/t27701}, :doc nil, :test true}, ->t27305 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta27306])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t27305, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :method-params ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta27306]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 11, :factory :positional, :methods ({:tag cljs.core.async/t27305, :variadic false, :max-fixed-arity 11}), :line 534, :max-fixed-arity 11, :fn-var true, :arglists (quote ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta27306])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, mapcat> {:protocol-inline nil, :meta {:arglists (quote ([f out] [f out buf-or-n])), :doc "Takes a function and a target channel, and returns a channel which\n  applies f to each value put, then supplies each element of the result\n  to the target channel. f must return a collection.\n\n  The returned channel will be unbuffered by default, or a buf-or-n\n  can be supplied. The target channel will be closed when the source\n  channel closes.", :end-column 14, :end-line 323, :column 7, :line 323, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/mapcat>, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 14, :method-params ([f out] [f out buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 323, :end-line 323, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f out] [f out buf-or-n])), :doc "Takes a function and a target channel, and returns a channel which\n  applies f to each value put, then supplies each element of the result\n  to the target channel. f must return a collection.\n\n  The returned channel will be unbuffered by default, or a buf-or-n\n  can be supplied. The target channel will be closed when the source\n  channel closes.", :test true}, fhnop {:meta {:private true, :end-column 21, :end-line 81, :column 16, :line 81, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :file "resources/public/js/out/cljs/core/async.cljs", :line 81, :column 1, :end-line 81, :end-column 21, :private true, :test true, :name cljs.core.async/fhnop}, ->t25999 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([f fn-handler meta26000])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t25999, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :method-params ([f fn-handler meta26000]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async/t25999, :variadic false, :max-fixed-arity 3}), :line 12, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f fn-handler meta26000])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, ->t26039 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([ch f map< meta26040])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t26039, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :method-params ([ch f map< meta26040]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async/t26039, :variadic false, :max-fixed-arity 4}), :line 205, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ch f map< meta26040])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, buffer {:protocol-inline nil, :meta {:arglists (quote ([n])), :doc "Returns a fixed buffer of size n. When full, puts will block/park.", :end-column 13, :end-line 17, :column 7, :line 17, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/buffer, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 13, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.buffers/FixedBuffer, :variadic false, :max-fixed-arity 1}), :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a fixed buffer of size n. When full, puts will block/park.", :test true}, close! {:protocol-inline nil, :meta {:arglists (quote ([port])), :end-column 13, :end-line 109, :column 7, :line 109, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/close!, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 13, :method-params ([port]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([port])), :test true}, t26015 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t26015, :file "resources/public/js/out/cljs/core/async.cljs", :type true, :anonymous true, :column 5, :line 130, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t26048 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([ch f map> meta26049])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t26048, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :method-params ([ch f map> meta26049]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async/t26048, :variadic false, :max-fixed-arity 4}), :line 232, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ch f map> meta26049])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, ->t26045 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([ch f map> meta26046])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t26045, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :method-params ([ch f map> meta26046]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async/t26045, :variadic false, :max-fixed-arity 4}), :line 232, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ch f map> meta26046])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, chan {:protocol-inline nil, :meta {:arglists (quote ([] [buf-or-n])), :doc "Creates a channel with an optional buffer. If buf-or-n is a number,\n  will create and use a fixed buffer of that size.", :end-column 11, :end-line 41, :column 7, :line 41, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/chan, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 11, :method-params ([] [buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 0} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1}), :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([] [buf-or-n])), :doc "Creates a channel with an optional buffer. If buf-or-n is a number,\n  will create and use a fixed buffer of that size.", :test true}, solo-mode* {:protocol-inline nil, :meta {:arglists (quote ([m mode])), :doc nil, :protocol cljs.core.async/Mix, :end-column 14, :end-line 487, :column 4, :line 487, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Mix, :name cljs.core.async/solo-mode*, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 14, :method-params ([m mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 482, :end-line 487, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m mode])), :doc nil, :test true}, tap {:protocol-inline nil, :meta {:arglists (quote ([mult ch] [mult ch close?])), :doc "Copies the mult source onto the supplied channel.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter.", :end-column 10, :end-line 465, :column 7, :line 465, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/tap, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 10, :method-params ([mult ch] [mult ch close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:variadic false, :max-fixed-arity 3}), :line 465, :end-line 465, :max-fixed-arity 3, :fn-var true, :arglists (quote ([mult ch] [mult ch close?])), :doc "Copies the mult source onto the supplied channel.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter.", :test true}, t26051 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t26051, :file "resources/public/js/out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 250, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t26045 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t26045, :file "resources/public/js/out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 232, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, admix {:protocol-inline nil, :meta {:arglists (quote ([mix ch])), :doc "Adds ch as an input to the mix", :end-column 12, :end-line 559, :column 7, :line 559, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/admix, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 12, :method-params ([mix ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 559, :end-line 559, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix ch])), :doc "Adds ch as an input to the mix", :test true}, unique {:protocol-inline nil, :meta {:arglists (quote ([ch] [ch buf-or-n])), :doc "Returns a channel that will contain values from ch. Consecutive duplicate\n   values will be dropped.\n\n  The output channel is unbuffered by default, unless buf-or-n is given.", :end-column 13, :end-line 754, :column 7, :line 754, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/unique, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 13, :method-params ([ch] [ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :line 754, :end-line 754, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ch] [ch buf-or-n])), :doc "Returns a channel that will contain values from ch. Consecutive duplicate\n   values will be dropped.\n\n  The output channel is unbuffered by default, unless buf-or-n is given.", :test true}, muxch* {:protocol-inline nil, :meta {:arglists (quote ([_])), :doc nil, :protocol cljs.core.async/Mux, :end-column 10, :end-line 415, :column 4, :line 415, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Mux, :name cljs.core.async/muxch*, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 10, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 414, :end-line 415, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc nil, :test true}, t26021 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t26021, :file "resources/public/js/out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 138, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t26042 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([fn1 _ meta26040 map< f ch meta26043])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t26042, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :method-params ([fn1 _ meta26040 map< f ch meta26043]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 10, :factory :positional, :methods ({:tag cljs.core.async/t26042, :variadic false, :max-fixed-arity 7}), :line 214, :max-fixed-arity 7, :fn-var true, :arglists (quote ([fn1 _ meta26040 map< f ch meta26043])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, solo-mode {:protocol-inline nil, :meta {:arglists (quote ([mix mode])), :doc "Sets the solo mode of the mix. mode must be one of :mute or :pause", :end-column 16, :end-line 586, :column 7, :line 586, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/solo-mode, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 16, :method-params ([mix mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 586, :end-line 586, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix mode])), :doc "Sets the solo mode of the mix. mode must be one of :mute or :pause", :test true}, ->t26021 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([cb flag alt-handler meta26022])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t26021, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :method-params ([cb flag alt-handler meta26022]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async/t26021, :variadic false, :max-fixed-arity 4}), :line 138, :max-fixed-arity 4, :fn-var true, :arglists (quote ([cb flag alt-handler meta26022])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, onto-chan {:protocol-inline nil, :meta {:arglists (quote ([ch coll] [ch coll close?])), :doc "Puts the contents of coll into the supplied channel.\n\n  By default the channel will be closed after the items are copied,\n  but can be determined by the close? parameter.\n\n  Returns a channel which will close after the items are copied.", :end-column 16, :end-line 389, :column 7, :line 389, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/onto-chan, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 16, :method-params ([ch coll] [ch coll close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 389, :end-line 389, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ch coll] [ch coll close?])), :doc "Puts the contents of coll into the supplied channel.\n\n  By default the channel will be closed after the items are copied,\n  but can be determined by the close? parameter.\n\n  Returns a channel which will close after the items are copied.", :test true}, t27579 {:num-fields 7, :protocols #{cljs.core.async/Pub cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t27579, :file "resources/public/js/out/cljs/core/async.cljs", :type true, :anonymous true, :column 14, :line 626, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t26012 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t26012, :file "resources/public/js/out/cljs/core/async.cljs", :type true, :anonymous true, :column 5, :line 130, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t26033 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t26033, :file "resources/public/js/out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 205, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, to-chan {:protocol-inline nil, :meta {:arglists (quote ([coll])), :doc "Creates and returns a channel which contains the contents of coll,\n  closing when exhausted.", :end-column 14, :end-line 405, :column 7, :line 405, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/to-chan, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 14, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1}), :line 405, :end-line 405, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Creates and returns a channel which contains the contents of coll,\n  closing when exhausted.", :test true}, dropping-buffer {:protocol-inline nil, :meta {:arglists (quote ([n])), :doc "Returns a buffer of size n. When full, puts will complete but\n  val will be dropped (no transfer).", :end-column 22, :end-line 22, :column 7, :line 22, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/dropping-buffer, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 22, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.buffers/DroppingBuffer, :variadic false, :max-fixed-arity 1}), :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a buffer of size n. When full, puts will complete but\n  val will be dropped (no transfer).", :test true}, untap-all {:protocol-inline nil, :meta {:arglists (quote ([mult])), :doc "Disconnects all target channels from a mult", :end-column 16, :end-line 478, :column 7, :line 478, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/untap-all, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 16, :method-params ([mult]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 478, :end-line 478, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mult])), :doc "Disconnects all target channels from a mult", :test true}, into {:protocol-inline nil, :meta {:arglists (quote ([coll ch])), :doc "Returns a channel containing the single (collection) result of the\n  items taken from the channel conjoined to the supplied\n  collection. ch must close before into produces a result.", :end-column 11, :end-line 727, :column 7, :line 727, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/into, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 11, :method-params ([coll ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :line 727, :end-line 727, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll ch])), :doc "Returns a channel containing the single (collection) result of the\n  items taken from the channel conjoined to the supplied\n  collection. ch must close before into produces a result.", :test true}, ->t27701 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([ensure-mult mults buf-fn topic-fn ch pub meta27702])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async/Pub cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async/Pub cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t27701, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :method-params ([ensure-mult mults buf-fn topic-fn ch pub meta27702]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 14, :factory :positional, :methods ({:tag cljs.core.async/t27701, :variadic false, :max-fixed-arity 7}), :line 626, :max-fixed-arity 7, :fn-var true, :arglists (quote ([ensure-mult mults buf-fn topic-fn ch pub meta27702])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, t26002 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t26002, :file "resources/public/js/out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 12, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, sub {:protocol-inline nil, :meta {:arglists (quote ([p topic ch] [p topic ch close?])), :doc "Subscribes a channel to a topic of a pub.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter.", :end-column 10, :end-line 652, :column 7, :line 652, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/sub, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 10, :method-params ([p topic ch] [p topic ch close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3} {:tag any, :variadic false, :max-fixed-arity 4}), :line 652, :end-line 652, :max-fixed-arity 4, :fn-var true, :arglists (quote ([p topic ch] [p topic ch close?])), :doc "Subscribes a channel to a topic of a pub.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter.", :test true}, alt-flag {:protocol-inline nil, :meta {:arglists (quote ([])), :private true, :end-column 16, :end-line 128, :column 8, :line 128, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :private true, :name cljs.core.async/alt-flag, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async/t26015, :variadic false, :max-fixed-arity 0}), :line 128, :end-line 128, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, map> {:protocol-inline nil, :meta {:arglists (quote ([f ch])), :doc "Takes a function and a target channel, and returns a channel which\n  applies f to each value before supplying it to the target channel.", :end-column 11, :end-line 228, :column 7, :line 228, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/map>, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 11, :method-params ([f ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async/t26048, :variadic false, :max-fixed-arity 2}), :line 228, :end-line 228, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f ch])), :doc "Takes a function and a target channel, and returns a channel which\n  applies f to each value before supplying it to the target channel.", :test true}, ->t26036 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([fn1 _ meta26034 map< f ch meta26037])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t26036, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :method-params ([fn1 _ meta26034 map< f ch meta26037]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 10, :factory :positional, :methods ({:tag cljs.core.async/t26036, :variadic false, :max-fixed-arity 7}), :line 214, :max-fixed-arity 7, :fn-var true, :arglists (quote ([fn1 _ meta26034 map< f ch meta26037])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, ->t26002 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([f fn-handler meta26003])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t26002, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :method-params ([f fn-handler meta26003]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async/t26002, :variadic false, :max-fixed-arity 3}), :line 12, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f fn-handler meta26003])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, t26042 {:num-fields 7, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t26042, :file "resources/public/js/out/cljs/core/async.cljs", :type true, :anonymous true, :column 10, :line 214, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, pipe {:protocol-inline nil, :meta {:arglists (quote ([from to] [from to close?])), :doc "Takes elements from the from channel and supplies them to the to\n   channel. By default, the to channel will be closed when the from\n   channel closes, but can be determined by the close?  parameter. Will\n   stop consuming the from channel if the to channel closes", :end-column 11, :end-line 338, :column 7, :line 338, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/pipe, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 11, :method-params ([from to] [from to close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:variadic false, :max-fixed-arity 3}), :line 338, :end-line 338, :max-fixed-arity 3, :fn-var true, :arglists (quote ([from to] [from to close?])), :doc "Takes elements from the from channel and supplies them to the to\n   channel. By default, the to channel will be closed when the from\n   channel closes, but can be determined by the close?  parameter. Will\n   stop consuming the from channel if the to channel closes", :test true}, ->t26018 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([cb flag alt-handler meta26019])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t26018, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :method-params ([cb flag alt-handler meta26019]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async/t26018, :variadic false, :max-fixed-arity 4}), :line 138, :max-fixed-arity 4, :fn-var true, :arglists (quote ([cb flag alt-handler meta26019])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, t26054 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t26054, :file "resources/public/js/out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 250, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, unmix {:protocol-inline nil, :meta {:arglists (quote ([mix ch])), :doc "Removes ch as an input to the mix", :end-column 12, :end-line 564, :column 7, :line 564, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/unmix, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 12, :method-params ([mix ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 564, :end-line 564, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix ch])), :doc "Removes ch as an input to the mix", :test true}, filter< {:protocol-inline nil, :meta {:arglists (quote ([p ch] [p ch buf-or-n])), :doc "Takes a predicate and a source channel, and returns a channel which\n  contains only the values taken from the source channel for which the\n  predicate returns true. The returned channel will be unbuffered by\n  default, or a buf-or-n can be supplied. The channel will close\n  when the source channel closes.", :end-column 14, :end-line 271, :column 7, :line 271, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/filter<, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 14, :method-params ([p ch] [p ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 271, :end-line 271, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p ch] [p ch buf-or-n])), :doc "Takes a predicate and a source channel, and returns a channel which\n  contains only the values taken from the source channel for which the\n  predicate returns true. The returned channel will be unbuffered by\n  default, or a buf-or-n can be supplied. The channel will close\n  when the source channel closes.", :test true}, sub* {:protocol-inline nil, :meta {:arglists (quote ([p v ch close?])), :doc nil, :protocol cljs.core.async/Pub, :end-column 8, :end-line 593, :column 4, :line 593, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Pub, :name cljs.core.async/sub*, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 8, :method-params ([p v ch close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 4}), :line 592, :end-line 593, :max-fixed-arity 4, :fn-var true, :arglists (quote ([p v ch close?])), :doc nil, :test true}, remove< {:protocol-inline nil, :meta {:arglists (quote ([p ch] [p ch buf-or-n])), :doc "Takes a predicate and a source channel, and returns a channel which\n  contains only the values taken from the source channel for which the\n  predicate returns false. The returned channel will be unbuffered by\n  default, or a buf-or-n can be supplied. The channel will close\n  when the source channel closes.", :end-column 14, :end-line 289, :column 7, :line 289, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/remove<, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 14, :method-params ([p ch] [p ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 289, :end-line 289, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p ch] [p ch buf-or-n])), :doc "Takes a predicate and a source channel, and returns a channel which\n  contains only the values taken from the source channel for which the\n  predicate returns false. The returned channel will be unbuffered by\n  default, or a buf-or-n can be supplied. The channel will close\n  when the source channel closes.", :test true}, t26039 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t26039, :file "resources/public/js/out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 205, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, untap* {:protocol-inline nil, :meta {:arglists (quote ([m ch])), :doc nil, :protocol cljs.core.async/Mult, :end-column 10, :end-line 419, :column 4, :line 419, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Mult, :name cljs.core.async/untap*, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 10, :method-params ([m ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 417, :end-line 419, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ch])), :doc nil, :test true}, toggle {:protocol-inline nil, :meta {:arglists (quote ([mix state-map])), :doc "Atomically sets the state(s) of one or more channels in a mix. The\n  state map is a map of channels -> channel-state-map. A\n  channel-state-map is a map of attrs -> boolean, where attr is one or\n  more of :mute, :pause or :solo. Any states supplied are merged with\n  the current state.\n\n  Note that channels can be added to a mix via toggle, which can be\n  used to add channels in a particular (e.g. paused) state.", :end-column 13, :end-line 574, :column 7, :line 574, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/toggle, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 13, :method-params ([mix state-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 574, :end-line 574, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix state-map])), :doc "Atomically sets the state(s) of one or more channels in a mix. The\n  state map is a map of channels -> channel-state-map. A\n  channel-state-map is a map of attrs -> boolean, where attr is one or\n  more of :mute, :pause or :solo. Any states supplied are merged with\n  the current state.\n\n  Note that channels can be added to a mix via toggle, which can be\n  used to add channels in a particular (e.g. paused) state.", :test true}, t27025 {:num-fields 4, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t27025, :file "resources/public/js/out/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 436, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, untap-all* {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc nil, :protocol cljs.core.async/Mult, :end-column 14, :end-line 420, :column 4, :line 420, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Mult, :name cljs.core.async/untap-all*, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 14, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 417, :end-line 420, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc nil, :test true}, ->t27579 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([ensure-mult mults buf-fn topic-fn ch pub meta27580])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async/Pub cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async/Pub cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t27579, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :method-params ([ensure-mult mults buf-fn topic-fn ch pub meta27580]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 14, :factory :positional, :methods ({:tag cljs.core.async/t27579, :variadic false, :max-fixed-arity 7}), :line 626, :max-fixed-arity 7, :fn-var true, :arglists (quote ([ensure-mult mults buf-fn topic-fn ch pub meta27580])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, t27701 {:num-fields 7, :protocols #{cljs.core.async/Pub cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t27701, :file "resources/public/js/out/cljs/core/async.cljs", :type true, :anonymous true, :column 14, :line 626, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, sliding-buffer {:protocol-inline nil, :meta {:arglists (quote ([n])), :doc "Returns a buffer of size n. When full, puts will complete, and be\n  buffered, but oldest elements in buffer will be dropped (not\n  transferred).", :end-column 21, :end-line 28, :column 7, :line 28, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/sliding-buffer, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 21, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.buffers/SlidingBuffer, :variadic false, :max-fixed-arity 1}), :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a buffer of size n. When full, puts will complete, and be\n  buffered, but oldest elements in buffer will be dropped (not\n  transferred).", :test true}, partition {:protocol-inline nil, :meta {:arglists (quote ([n ch] [n ch buf-or-n])), :doc "Returns a channel that will contain vectors of n items taken from ch. The\n   final vector in the return channel may be smaller than n if ch closed before\n   the vector could be completely filled.\n\n   The output channel is unbuffered by default, unless buf-or-n is given", :end-column 16, :end-line 774, :column 7, :line 774, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/partition, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 16, :method-params ([n ch] [n ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 774, :end-line 774, :max-fixed-arity 3, :fn-var true, :arglists (quote ([n ch] [n ch buf-or-n])), :doc "Returns a channel that will contain vectors of n items taken from ch. The\n   final vector in the return channel may be smaller than n if ch closed before\n   the vector could be completely filled.\n\n   The output channel is unbuffered by default, unless buf-or-n is given", :test true}, ->t26015 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([flag alt-flag meta26016])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t26015, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :method-params ([flag alt-flag meta26016]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :methods ({:tag cljs.core.async/t26015, :variadic false, :max-fixed-arity 3}), :line 130, :max-fixed-arity 3, :fn-var true, :arglists (quote ([flag alt-flag meta26016])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, Mult {:meta {:protocol-info {:methods {tap* [[m ch close?]], untap* [[m ch]], untap-all* [[m]]}}, :protocol-symbol true, :doc nil, :end-column 18, :end-line 417, :column 14, :line 417, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :protocol-symbol true, :name cljs.core.async/Mult, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 18, :column 1, :line 417, :protocol-info {:methods {tap* [[m ch close?]], untap* [[m ch]], untap-all* [[m]]}}, :info nil, :end-line 417, :impls #{cljs.core.async/t26804 cljs.core.async/t27025}, :doc nil, :test true}, merge {:protocol-inline nil, :meta {:arglists (quote ([chs] [chs buf-or-n])), :doc "Takes a collection of source channels and returns a channel which\n  contains all values taken from them. The returned channel will be\n  unbuffered by default, or a buf-or-n can be supplied. The channel\n  will close after all the source channels have closed.", :end-column 12, :end-line 709, :column 7, :line 709, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/merge, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 12, :method-params ([chs] [chs buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :line 709, :end-line 709, :max-fixed-arity 2, :fn-var true, :arglists (quote ([chs] [chs buf-or-n])), :doc "Takes a collection of source channels and returns a channel which\n  contains all values taken from them. The returned channel will be\n  unbuffered by default, or a buf-or-n can be supplied. The channel\n  will close after all the source channels have closed.", :test true}, partition-by {:protocol-inline nil, :meta {:arglists (quote ([f ch] [f ch buf-or-n])), :doc "Returns a channel that will contain vectors of items taken from ch. New\n   vectors will be created whenever (f itm) returns a value that differs from\n   the previous item's (f itm).\n\n  The output channel is unbuffered, unless buf-or-n is given", :end-column 19, :end-line 800, :column 7, :line 800, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/partition-by, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 19, :method-params ([f ch] [f ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 800, :end-line 800, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f ch] [f ch buf-or-n])), :doc "Returns a channel that will contain vectors of items taken from ch. New\n   vectors will be created whenever (f itm) returns a value that differs from\n   the previous item's (f itm).\n\n  The output channel is unbuffered, unless buf-or-n is given", :test true}, unsub-all {:protocol-inline nil, :meta {:arglists (quote ([p] [p topic])), :doc "Unsubscribes all channels from a pub, or a topic of a pub", :end-column 16, :end-line 665, :column 7, :line 665, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/unsub-all, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 16, :method-params ([p] [p topic]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag any, :variadic false, :max-fixed-arity 2}), :line 665, :end-line 665, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p] [p topic])), :doc "Unsubscribes all channels from a pub, or a topic of a pub", :test true}, >! {:protocol-inline nil, :meta {:arglists (quote ([port val])), :doc "puts a val into port. nil values are not allowed. Must be called\n  inside a (go ...) block. Will park if no buffer space is available.\n  Returns true unless port is already closed.", :end-column 9, :end-line 83, :column 7, :line 83, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/>!, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 9, :method-params ([port val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 2}), :line 83, :end-line 83, :max-fixed-arity 2, :fn-var true, :arglists (quote ([port val])), :doc "puts a val into port. nil values are not allowed. Must be called\n  inside a (go ...) block. Will park if no buffer space is available.\n  Returns true unless port is already closed.", :test true}, unmix-all* {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc nil, :protocol cljs.core.async/Mix, :end-column 14, :end-line 485, :column 4, :line 485, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Mix, :name cljs.core.async/unmix-all*, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 14, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 482, :end-line 485, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc nil, :test true}, t27305 {:num-fields 11, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t27305, :file "resources/public/js/out/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 534, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, nop {:protocol-inline nil, :meta {:arglists (quote ([_])), :private true, :end-column 11, :end-line 80, :column 8, :line 80, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :private true, :name cljs.core.async/nop, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 11, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 1}), :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :test true}, split {:protocol-inline nil, :meta {:arglists (quote ([p ch] [p ch t-buf-or-n f-buf-or-n])), :doc "Takes a predicate and a source channel and returns a vector of two\n  channels, the first of which will contain the values for which the\n  predicate returned true, the second those for which it returned\n  false.\n\n  The out channels will be unbuffered by default, or two buf-or-ns can\n  be supplied. The channels will close after the source channel has\n  closed.", :end-column 12, :end-line 354, :column 7, :line 354, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/split, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 12, :method-params ([p ch] [p ch t-buf-or-n f-buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2} {:tag cljs.core/IVector, :variadic false, :max-fixed-arity 4}), :line 354, :end-line 354, :max-fixed-arity 4, :fn-var true, :arglists (quote ([p ch] [p ch t-buf-or-n f-buf-or-n])), :doc "Takes a predicate and a source channel and returns a vector of two\n  channels, the first of which will contain the values for which the\n  predicate returned true, the second those for which it returned\n  false.\n\n  The out channels will be unbuffered by default, or two buf-or-ns can\n  be supplied. The channels will close after the source channel has\n  closed.", :test true}, unmix-all {:protocol-inline nil, :meta {:arglists (quote ([mix])), :doc "removes all inputs from the mix", :end-column 16, :end-line 569, :column 7, :line 569, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/unmix-all, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 16, :method-params ([mix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 569, :end-line 569, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mix])), :doc "removes all inputs from the mix", :test true}, filter> {:protocol-inline nil, :meta {:arglists (quote ([p ch])), :doc "Takes a predicate and a target channel, and returns a channel which\n  supplies only the values for which the predicate returns true to the\n  target channel.", :end-column 14, :end-line 245, :column 7, :line 245, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/filter>, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 14, :method-params ([p ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async/t26054, :variadic false, :max-fixed-arity 2}), :line 245, :end-line 245, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p ch])), :doc "Takes a predicate and a target channel, and returns a channel which\n  supplies only the values for which the predicate returns true to the\n  target channel.", :test true}, tap* {:protocol-inline nil, :meta {:arglists (quote ([m ch close?])), :doc nil, :protocol cljs.core.async/Mult, :end-column 8, :end-line 418, :column 4, :line 418, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Mult, :name cljs.core.async/tap*, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 8, :method-params ([m ch close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 417, :end-line 418, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m ch close?])), :doc nil, :test true}, untap {:protocol-inline nil, :meta {:arglists (quote ([mult ch])), :doc "Disconnects a target channel from a mult", :end-column 12, :end-line 473, :column 7, :line 473, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/untap, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 12, :method-params ([mult ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 473, :end-line 473, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mult ch])), :doc "Disconnects a target channel from a mult", :test true}, alt-handler {:protocol-inline nil, :meta {:arglists (quote ([flag cb])), :private true, :end-column 19, :end-line 137, :column 8, :line 137, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :private true, :name cljs.core.async/alt-handler, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 19, :method-params ([flag cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async/t26021, :variadic false, :max-fixed-arity 2}), :line 137, :end-line 137, :max-fixed-arity 2, :fn-var true, :arglists (quote ([flag cb])), :test true}, alts! {:protocol-inline nil, :meta {:arglists (quote ([ports & {:as opts}])), :doc "Completes at most one of several channel operations. Must be called\n   inside a (go ...) block. ports is a vector of channel endpoints,\n   which can be either a channel to take from or a vector of\n  [channel-to-put-to val-to-put], in any combination. Takes will be\n  made as if by <!, and puts will be made as if by >!. Unless\n  the :priority option is true, if more than one port operation is\n  ready a non-deterministic choice will be made. If no operation is\n  ready and a :default value is supplied, [default-val :default] will\n  be returned, otherwise alts! will park until the first operation to\n  become ready completes. Returns [val port] of the completed\n  operation, where val is the value taken for takes, and a\n  boolean (true unless already closed, as per put!) for puts.\n\n  opts are passed as :key val ... Supported options:\n\n  :default val - the value to use if none of the operations are immediately ready\n  :priority true - (default nil) when true, the operations will be tried in order.\n\n  Note: there is no guarantee that the port exps or val exprs will be\n  used, nor in what order should they be, so they should not be\n  depended upon for side effects.", :end-column 12, :end-line 171, :column 7, :line 171, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/alts!, :variadic true, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 12, :method-params ([ports p__26027]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic true, :max-fixed-arity 1}), :line 171, :end-line 171, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ports & {:as opts}])), :doc "Completes at most one of several channel operations. Must be called\n   inside a (go ...) block. ports is a vector of channel endpoints,\n   which can be either a channel to take from or a vector of\n  [channel-to-put-to val-to-put], in any combination. Takes will be\n  made as if by <!, and puts will be made as if by >!. Unless\n  the :priority option is true, if more than one port operation is\n  ready a non-deterministic choice will be made. If no operation is\n  ready and a :default value is supplied, [default-val :default] will\n  be returned, otherwise alts! will park until the first operation to\n  become ready completes. Returns [val port] of the completed\n  operation, where val is the value taken for takes, and a\n  boolean (true unless already closed, as per put!) for puts.\n\n  opts are passed as :key val ... Supported options:\n\n  :default val - the value to use if none of the operations are immediately ready\n  :priority true - (default nil) when true, the operations will be tried in order.\n\n  Note: there is no guarantee that the port exps or val exprs will be\n  used, nor in what order should they be, so they should not be\n  depended upon for side effects.", :test true}, unsub {:protocol-inline nil, :meta {:arglists (quote ([p topic ch])), :doc "Unsubscribes a channel from a topic of a pub", :end-column 12, :end-line 660, :column 7, :line 660, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/unsub, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 12, :method-params ([p topic ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 660, :end-line 660, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p topic ch])), :doc "Unsubscribes a channel from a topic of a pub", :test true}, map< {:protocol-inline nil, :meta {:arglists (quote ([f ch])), :doc "Takes a function and a source channel, and returns a channel which\n  contains the values produced by applying f to each value taken from\n  the source channel", :end-column 11, :end-line 200, :column 7, :line 200, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/map<, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 11, :method-params ([f ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async/t26039, :variadic false, :max-fixed-arity 2}), :line 200, :end-line 200, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f ch])), :doc "Takes a function and a source channel, and returns a channel which\n  contains the values produced by applying f to each value taken from\n  the source channel", :test true}, ->t26804 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([cs ch mult meta26805])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t26804, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :method-params ([cs ch mult meta26805]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 11, :factory :positional, :methods ({:tag cljs.core.async/t26804, :variadic false, :max-fixed-arity 4}), :line 436, :max-fixed-arity 4, :fn-var true, :arglists (quote ([cs ch mult meta26805])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, fn-handler {:protocol-inline nil, :meta {:arglists (quote ([f])), :private true, :end-column 18, :end-line 11, :column 8, :line 11, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :private true, :name cljs.core.async/fn-handler, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 18, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async/t26002, :variadic false, :max-fixed-arity 1}), :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, do-alts {:protocol-inline nil, :meta {:arglists (quote ([fret ports opts])), :doc "returns derefable [val port] if immediate, nil if enqueued", :end-column 14, :end-line 145, :column 7, :line 145, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/do-alts, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 14, :method-params ([fret ports opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{cljs.core.async.impl.channels/t12226 clj-nil}, :variadic false, :max-fixed-arity 3}), :line 145, :end-line 145, :max-fixed-arity 3, :fn-var true, :arglists (quote ([fret ports opts])), :doc "returns derefable [val port] if immediate, nil if enqueued", :test true}, random-array {:protocol-inline nil, :meta {:arglists (quote ([n])), :private true, :end-column 20, :end-line 114, :column 8, :line 114, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :private true, :name cljs.core.async/random-array, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 20, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag array, :variadic false, :max-fixed-arity 1}), :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :test true}, Mix {:meta {:protocol-info {:methods {admix* [[m ch]], unmix* [[m ch]], unmix-all* [[m]], toggle* [[m state-map]], solo-mode* [[m mode]]}}, :protocol-symbol true, :doc nil, :end-column 17, :end-line 482, :column 14, :line 482, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :protocol-symbol true, :name cljs.core.async/Mix, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 17, :column 1, :line 482, :protocol-info {:methods {admix* [[m ch]], unmix* [[m ch]], unmix-all* [[m]], toggle* [[m state-map]], solo-mode* [[m mode]]}}, :info nil, :end-line 482, :impls #{cljs.core.async/t27424 cljs.core.async/t27305}, :doc nil, :test true}, toggle* {:protocol-inline nil, :meta {:arglists (quote ([m state-map])), :doc nil, :protocol cljs.core.async/Mix, :end-column 11, :end-line 486, :column 4, :line 486, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Mix, :name cljs.core.async/toggle*, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 11, :method-params ([m state-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 482, :end-line 486, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m state-map])), :doc nil, :test true}, mult {:protocol-inline nil, :meta {:arglists (quote ([ch])), :doc "Creates and returns a mult(iple) of the supplied channel. Channels\n  containing copies of the channel can be created with 'tap', and\n  detached with 'untap'.\n\n  Each item is distributed to all taps in parallel and synchronously,\n  i.e. each tap must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow taps from holding up the mult.\n\n  Items received when there are no taps get dropped.\n\n  If a tap puts to a closed channel, it will be removed from the mult.", :end-column 11, :end-line 422, :column 7, :line 422, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/mult, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 11, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async/t27025, :variadic false, :max-fixed-arity 1}), :line 422, :end-line 422, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ch])), :doc "Creates and returns a mult(iple) of the supplied channel. Channels\n  containing copies of the channel can be created with 'tap', and\n  detached with 'untap'.\n\n  Each item is distributed to all taps in parallel and synchronously,\n  i.e. each tap must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow taps from holding up the mult.\n\n  Items received when there are no taps get dropped.\n\n  If a tap puts to a closed channel, it will be removed from the mult.", :test true}, ->t26012 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([flag alt-flag meta26013])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t26012, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :method-params ([flag alt-flag meta26013]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :methods ({:tag cljs.core.async/t26012, :variadic false, :max-fixed-arity 3}), :line 130, :max-fixed-arity 3, :fn-var true, :arglists (quote ([flag alt-flag meta26013])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, t26048 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t26048, :file "resources/public/js/out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 232, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, mapcat< {:protocol-inline nil, :meta {:arglists (quote ([f in] [f in buf-or-n])), :doc "Takes a function and a source channel, and returns a channel which\n  contains the values in each collection produced by applying f to\n  each value taken from the source channel. f must return a\n  collection.\n\n  The returned channel will be unbuffered by default, or a buf-or-n\n  can be supplied. The channel will close when the source channel\n  closes.", :end-column 14, :end-line 308, :column 7, :line 308, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/mapcat<, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 14, :method-params ([f in] [f in buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 308, :end-line 308, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f in] [f in buf-or-n])), :doc "Takes a function and a source channel, and returns a channel which\n  contains the values in each collection produced by applying f to\n  each value taken from the source channel. f must return a\n  collection.\n\n  The returned channel will be unbuffered by default, or a buf-or-n\n  can be supplied. The channel will close when the source channel\n  closes.", :test true}, t26018 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t26018, :file "resources/public/js/out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 138, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t27025 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([cs ch mult meta27026])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t27025, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :method-params ([cs ch mult meta27026]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 11, :factory :positional, :methods ({:tag cljs.core.async/t27025, :variadic false, :max-fixed-arity 4}), :line 436, :max-fixed-arity 4, :fn-var true, :arglists (quote ([cs ch mult meta27026])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, unblocking-buffer? {:protocol-inline nil, :meta {:arglists (quote ([buff])), :doc "Returns true if a channel created with buff will never block. That is to say,\n   puts into this buffer will never cause the buffer to be full. ", :end-column 25, :end-line 35, :column 7, :line 35, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/unblocking-buffer?, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 25, :method-params ([buff]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([buff])), :doc "Returns true if a channel created with buff will never block. That is to say,\n   puts into this buffer will never cause the buffer to be full. ", :test true}, t26804 {:num-fields 4, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t26804, :file "resources/public/js/out/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 436, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, put! {:protocol-inline nil, :meta {:arglists (quote ([port val] [port val fn1] [port val fn1 on-caller?])), :doc "Asynchronously puts a val into port, calling fn0 (if supplied) when\n   complete. nil values are not allowed. Will throw if closed. If\n   on-caller? (default true) is true, and the put is immediately\n   accepted, will call fn0 on calling thread.  Returns nil.", :end-column 11, :end-line 90, :column 7, :line 90, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/put!, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 11, :method-params ([port val] [port val fn1] [port val fn1 on-caller?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{boolean any}, :variadic false, :max-fixed-arity 2} {:tag #{boolean any}, :variadic false, :max-fixed-arity 3} {:tag #{boolean any}, :variadic false, :max-fixed-arity 4}), :line 90, :end-line 90, :max-fixed-arity 4, :fn-var true, :arglists (quote ([port val] [port val fn1] [port val fn1 on-caller?])), :doc "Asynchronously puts a val into port, calling fn0 (if supplied) when\n   complete. nil values are not allowed. Will throw if closed. If\n   on-caller? (default true) is true, and the put is immediately\n   accepted, will call fn0 on calling thread.  Returns nil.", :test true}, take! {:protocol-inline nil, :meta {:arglists (quote ([port fn1] [port fn1 on-caller?])), :doc "Asynchronously takes a val from port, passing to fn1. Will pass nil\n   if closed. If on-caller? (default true) is true, and value is\n   immediately available, will call fn1 on calling thread.\n   Returns nil.", :end-column 12, :end-line 65, :column 7, :line 65, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs/core/async.cljs"}, :name cljs.core.async/take!, :variadic false, :file "resources/public/js/out/cljs/core/async.cljs", :end-column 12, :method-params ([port fn1] [port fn1 on-caller?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 2} {:tag clj-nil, :variadic false, :max-fixed-arity 3}), :line 65, :end-line 65, :max-fixed-arity 3, :fn-var true, :arglists (quote ([port fn1] [port fn1 on-caller?])), :doc "Asynchronously takes a val from port, passing to fn1. Will pass nil\n   if closed. If on-caller? (default true) is true, and value is\n   immediately available, will call fn1 on calling thread.\n   Returns nil.", :test true}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:order [:priority :default :recur :else :pause :mute :solo :solos :mutes :reads :cljs.core.async/nothing], :seen #{:mutes :solo :cljs.core.async/nothing :else :default :recur :priority :solos :pause :mute :reads}}, :doc nil}