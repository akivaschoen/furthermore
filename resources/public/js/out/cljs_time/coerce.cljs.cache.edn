;; Analyzed by ClojureScript 0.0-3119
{:use-macros nil, :excludes #{second extend}, :name cljs-time.coerce, :imports nil, :requires {time-fmt cljs-time.format, cljs-time.format cljs-time.format, cljs-time.core cljs-time.core}, :uses {minute cljs-time.core, hour cljs-time.core, day cljs-time.core, date-time cljs-time.core, second cljs-time.core, month cljs-time.core, year cljs-time.core, milli cljs-time.core}, :defs {to-local-date {:protocol-inline nil, :meta {:arglists (quote ([obj])), :doc "Convert `obj` to a goog.date.Date instance", :end-column 20, :end-line 66, :column 7, :line 66, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs_time/coerce.cljs"}, :name cljs-time.coerce/to-local-date, :variadic false, :file "resources/public/js/out/cljs_time/coerce.cljs", :end-column 20, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{goog/date.Date clj-nil}, :variadic false, :max-fixed-arity 1}), :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj])), :doc "Convert `obj` to a goog.date.Date instance", :test true}, to-long {:protocol-inline nil, :meta {:arglists (quote ([obj])), :doc "Convert `obj` to the number of milliseconds after the Unix epoch.", :end-column 14, :end-line 41, :column 7, :line 41, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs_time/coerce.cljs"}, :name cljs-time.coerce/to-long, :variadic false, :file "resources/public/js/out/cljs_time/coerce.cljs", :end-column 14, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj])), :doc "Convert `obj` to the number of milliseconds after the Unix epoch.", :test true}, from-date {:protocol-inline nil, :meta {:arglists (quote ([date])), :doc "Returns a DateTime instance in the UTC time zone corresponding to the given\n  js Date object.", :end-column 16, :end-line 35, :column 7, :line 35, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs_time/coerce.cljs"}, :name cljs-time.coerce/from-date, :variadic false, :file "resources/public/js/out/cljs_time/coerce.cljs", :end-column 16, :method-params ([date]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag goog/date.UtcDateTime, :variadic false, :max-fixed-arity 1}), :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([date])), :doc "Returns a DateTime instance in the UTC time zone corresponding to the given\n  js Date object.", :test true}, to-local-date-time {:protocol-inline nil, :meta {:arglists (quote ([obj])), :doc "Convert `obj` to a goog.date.DateTime instance", :end-column 25, :end-line 72, :column 7, :line 72, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs_time/coerce.cljs"}, :name cljs-time.coerce/to-local-date-time, :variadic false, :file "resources/public/js/out/cljs_time/coerce.cljs", :end-column 25, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{goog/date.DateTime clj-nil}, :variadic false, :max-fixed-arity 1}), :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj])), :doc "Convert `obj` to a goog.date.DateTime instance", :test true}, from-string {:protocol-inline nil, :meta {:arglists (quote ([s])), :doc "Returns DateTime instance from string using formatters in cljs-time.format,\n  returning first which parses", :end-column 18, :end-line 26, :column 7, :line 26, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs_time/coerce.cljs"}, :name cljs-time.coerce/from-string, :variadic false, :file "resources/public/js/out/cljs_time/coerce.cljs", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns DateTime instance from string using formatters in cljs-time.format,\n  returning first which parses", :test true}, to-string {:protocol-inline nil, :meta {:arglists (quote ([obj])), :doc "Returns a string representation of obj in UTC time-zone\n  using \"yyyy-MM-dd'T'HH:mm:ss.SSSZZ\" date-time representation.", :end-column 16, :end-line 59, :column 7, :line 59, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs_time/coerce.cljs"}, :name cljs-time.coerce/to-string, :variadic false, :file "resources/public/js/out/cljs_time/coerce.cljs", :end-column 16, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj])), :doc "Returns a string representation of obj in UTC time-zone\n  using \"yyyy-MM-dd'T'HH:mm:ss.SSSZZ\" date-time representation.", :test true}, to-date {:protocol-inline nil, :meta {:arglists (quote ([obj])), :doc "Convert `obj` to a JavaScript Date instance.", :end-column 14, :end-line 53, :column 7, :line 53, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs_time/coerce.cljs"}, :name cljs-time.coerce/to-date, :variadic false, :file "resources/public/js/out/cljs_time/coerce.cljs", :end-column 14, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{js/Date clj-nil}, :variadic false, :max-fixed-arity 1}), :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj])), :doc "Convert `obj` to a JavaScript Date instance.", :test true}, from-long {:protocol-inline nil, :meta {:arglists (quote ([millis])), :doc "Returns a DateTime instance in the UTC time zone corresponding to the given\n  number of milliseconds after the Unix epoch.", :end-column 16, :end-line 20, :column 7, :line 20, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs_time/coerce.cljs"}, :name cljs-time.coerce/from-long, :variadic false, :file "resources/public/js/out/cljs_time/coerce.cljs", :end-column 16, :method-params ([millis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag goog/date.UtcDateTime, :variadic false, :max-fixed-arity 1}), :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([millis])), :doc "Returns a DateTime instance in the UTC time zone corresponding to the given\n  number of milliseconds after the Unix epoch.", :test true}, ICoerce {:meta {:protocol-info {:methods {to-date-time [[obj]]}}, :protocol-symbol true, :doc nil, :end-column 21, :end-line 17, :column 14, :line 17, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs_time/coerce.cljs"}, :protocol-symbol true, :name cljs-time.coerce/ICoerce, :file "resources/public/js/out/cljs_time/coerce.cljs", :end-column 21, :column 1, :line 17, :protocol-info {:methods {to-date-time [[obj]]}}, :info nil, :end-line 17, :impls #{nil js/Date goog/date.DateTime number goog/date.Date string goog/date.UtcDateTime}, :doc nil, :test true}, to-date-time {:protocol-inline nil, :meta {:arglists (quote ([obj])), :doc "Convert `obj` to a goog.date.DateTime instance.", :protocol cljs-time.coerce/ICoerce, :end-column 16, :end-line 18, :column 4, :line 18, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs_time/coerce.cljs"}, :protocol cljs-time.coerce/ICoerce, :name cljs-time.coerce/to-date-time, :variadic false, :file "resources/public/js/out/cljs_time/coerce.cljs", :end-column 16, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 17, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj])), :doc "Convert `obj` to a goog.date.DateTime instance.", :test true}, to-epoch {:protocol-inline nil, :meta {:arglists (quote ([obj])), :doc "Convert `obj` to Unix epoch.", :end-column 15, :end-line 47, :column 7, :line 47, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs_time/coerce.cljs"}, :name cljs-time.coerce/to-epoch, :variadic false, :file "resources/public/js/out/cljs_time/coerce.cljs", :end-column 15, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any number clj-nil}, :variadic false, :max-fixed-arity 1}), :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj])), :doc "Convert `obj` to Unix epoch.", :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:else :date-time], :seen #{:date-time :else}}, :doc "### Utilites to coerce goog.data DateTime instances to and from\n  various other types.\n\n  For example, to convert a goog.date DateTime to and from a js number:\n\n    => (to-long (date-time 1998 4 25))\n    893462400000\n\n    => (from-long 893462400000)\n    #<19980425T000000>"}