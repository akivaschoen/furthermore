;; Analyzed by ClojureScript 0.0-3119
{:use-macros nil, :excludes #{}, :name cljs-time.local, :imports nil, :requires {goog.date.DateTime goog.date.DateTime, fmt cljs-time.format, cljs-time.format cljs-time.format, coerce cljs-time.coerce, cljs-time.coerce cljs-time.coerce, cljs-time.core cljs-time.core, time cljs-time.core}, :uses nil, :defs {format-local-time {:protocol-inline nil, :meta {:arglists (quote ([obj format-key])), :doc "Format obj as local time using the local formatter corresponding\n  to format-key.", :end-column 24, :end-line 85, :column 7, :line 85, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs_time/local.cljs"}, :name cljs-time.local/format-local-time, :variadic false, :file "resources/public/js/out/cljs_time/local.cljs", :end-column 24, :method-params ([obj format-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 85, :end-line 85, :max-fixed-arity 2, :fn-var true, :arglists (quote ([obj format-key])), :doc "Format obj as local time using the local formatter corresponding\n  to format-key.", :test true}, from-local-string {:protocol-inline nil, :meta {:arglists (quote ([s])), :doc "Return local DateTime instance from string using\n  formatters in *local-formatters*, returning first\n  which parses.", :private true, :end-column 25, :end-line 54, :column 8, :line 54, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs_time/local.cljs"}, :private true, :name cljs-time.local/from-local-string, :variadic false, :file "resources/public/js/out/cljs_time/local.cljs", :end-column 25, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Return local DateTime instance from string using\n  formatters in *local-formatters*, returning first\n  which parses.", :test true}, as-local-date-time-to-time-zone {:protocol-inline nil, :meta {:arglists (quote ([obj])), :doc "Coerce to date-time in the default time zone.", :private true, :end-column 39, :end-line 49, :column 8, :line 49, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs_time/local.cljs"}, :private true, :name cljs-time.local/as-local-date-time-to-time-zone, :variadic false, :file "resources/public/js/out/cljs_time/local.cljs", :end-column 39, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag goog/date.DateTime, :variadic false, :max-fixed-arity 1}), :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj])), :doc "Coerce to date-time in the default time zone.", :test true}, as-local-date-time-from-time-zone {:protocol-inline nil, :meta {:arglists (quote ([obj])), :doc "Coerce to date-time in the default time zone retaining time fields.", :private true, :end-column 41, :end-line 44, :column 8, :line 44, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs_time/local.cljs"}, :private true, :name cljs-time.local/as-local-date-time-from-time-zone, :variadic false, :file "resources/public/js/out/cljs_time/local.cljs", :end-column 41, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{goog/date.DateTime clj-nil}, :variadic false, :max-fixed-arity 1}), :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj])), :doc "Coerce to date-time in the default time zone retaining time fields.", :test true}, to-local-date-time {:protocol-inline nil, :meta {:arglists (quote ([obj])), :doc "convert `obj` to a local goog.date\n                             DateTime instance retaining time fields.", :protocol cljs-time.local/ILocalCoerce, :end-column 22, :end-line 41, :column 4, :line 41, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs_time/local.cljs"}, :protocol cljs-time.local/ILocalCoerce, :name cljs-time.local/to-local-date-time, :variadic false, :file "resources/public/js/out/cljs_time/local.cljs", :end-column 22, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 40, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj])), :doc "convert `obj` to a local goog.date\n                             DateTime instance retaining time fields.", :test true}, ILocalCoerce {:meta {:protocol-info {:methods {to-local-date-time [[obj]]}}, :protocol-symbol true, :doc nil, :end-column 26, :end-line 40, :column 14, :line 40, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs_time/local.cljs"}, :protocol-symbol true, :name cljs-time.local/ILocalCoerce, :file "resources/public/js/out/cljs_time/local.cljs", :end-column 26, :column 1, :line 40, :protocol-info {:methods {to-local-date-time [[obj]]}}, :info nil, :end-line 40, :impls #{nil js/Date goog/date.DateTime number string}, :doc nil, :test true}, local-now {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "Returns a DateTime for the current instant in the default time zone.", :end-column 16, :end-line 35, :column 7, :line 35, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs_time/local.cljs"}, :name cljs-time.local/local-now, :variadic false, :file "resources/public/js/out/cljs_time/local.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag goog/date.DateTime, :variadic false, :max-fixed-arity 0}), :line 35, :end-line 35, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a DateTime for the current instant in the default time zone.", :test true}, *local-formatters* {:meta {:dynamic true, :doc "Map of local formatters for parsing and printing.", :end-column 21, :end-line 27, :column 3, :line 27, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/cljs_time/local.cljs"}, :name cljs-time.local/*local-formatters*, :file "resources/public/js/out/cljs_time/local.cljs", :end-column 21, :column 1, :dynamic true, :line 26, :end-line 27, :doc "Map of local formatters for parsing and printing.", :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:type :fmt/formatter :parser :else], :seen #{:else :type :parser :fmt/formatter}}, :doc "Functions for working with local time without having to shift\n  to/from utc, the preferred time zone of clj-time.core.\n  Get the current local time with (local-now).\n  (to-local-date-time obj) returns a local date-time instance\n  retaining the time fields.\n  The following all return 1986-10-14 04:03:27.246 with the\n  local time zone.\n  (to-local-date-time (clj-time.core/date-time 1986 10 14 4 3 27 246))\n  (to-local-date-time \"1986-10-14T04:03:27.246\")\n  (to-local-date-time \"1986-10-14T04:03:27.246Z\")\n  The dynamic var *local-formatters* contains a map of local formatters\n  for parsing and printing. It is initialized with all the formatters in\n  clj-time.format localized.\n  to-local-date-time for strings uses *local-formatters* to parse.\n  (format-local-time (local-now) :basic-date-time) formats an obj using\n  a formatter in *local-formatters* corresponding to the format-key\n  passed in.\n  "}