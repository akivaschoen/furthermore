;; Analyzed by ClojureScript 0.0-3119
{:use-macros nil, :excludes #{}, :name markdown.core, :imports nil, :requires {markdown.transformers markdown.transformers}, :uses {*substring* markdown.transformers, transformer-vector markdown.transformers, *next-line* markdown.transformers, parse-reference markdown.transformers, parse-reference-link markdown.transformers}, :defs {mdToHtml {:protocol-inline nil, :meta {:arglists (quote ([& params])), :doc "Js accessible wrapper", :export true, :end-column 24, :end-line 56, :column 16, :line 56, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/markdown/core.cljs"}, :name markdown.core/mdToHtml, :variadic true, :file "resources/public/js/out/markdown/core.cljs", :end-column 24, :method-params ([params]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic true, :max-fixed-arity 0}), :line 56, :end-line 56, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& params])), :doc "Js accessible wrapper", :test true}, md->html {:protocol-inline nil, :meta {:arglists (quote ([text & params])), :doc "processes input text line by line and outputs an HTML string", :end-column 15, :end-line 27, :column 7, :line 27, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/markdown/core.cljs"}, :name markdown.core/md->html, :variadic true, :file "resources/public/js/out/markdown/core.cljs", :end-column 15, :method-params ([text params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic true, :max-fixed-arity 1}), :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text & params])), :doc "processes input text line by line and outputs an HTML string", :test true}, parse-references {:protocol-inline nil, :meta {:arglists (quote ([lines])), :end-column 23, :end-line 21, :column 7, :line 21, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/markdown/core.cljs"}, :name markdown.core/parse-references, :variadic false, :file "resources/public/js/out/markdown/core.cljs", :end-column 23, :method-params ([lines]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([lines])), :test true}, format {:protocol-inline nil, :meta {:arglists (quote ([fmt & args])), :doc "Removed from cljs.core 0.0-1885, Ref. http://goo.gl/su7Xkj", :end-column 13, :end-line 18, :column 7, :line 18, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/markdown/core.cljs"}, :name markdown.core/format, :variadic true, :file "resources/public/js/out/markdown/core.cljs", :end-column 13, :method-params ([fmt args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fmt & args])), :doc "Removed from cljs.core 0.0-1885, Ref. http://goo.gl/su7Xkj", :test true}, init-transformer {:protocol-inline nil, :meta {:arglists (quote ([{:keys [replacement-transformers custom-transformers]}])), :private true, :end-column 24, :end-line 5, :column 8, :line 5, :file "/Users/akiva/Code/projects/furthermore/resources/public/js/out/markdown/core.cljs"}, :private true, :name markdown.core/init-transformer, :variadic false, :file "resources/public/js/out/markdown/core.cljs", :end-column 24, :method-params ([p__28777]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [replacement-transformers custom-transformers]}])), :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:custom-transformers :replacement-transformers :reference-links? :clojurescript :references :last-line-empty? :buf :lists :eof], :seen #{:lists :buf :clojurescript :last-line-empty? :references :eof :reference-links? :custom-transformers :replacement-transformers}}, :doc nil}